import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from flask import Flask, request, jsonify, Response
import random

app = Flask(__name__)


data = [[], []]


def get_delay_keny(cps, i):
    return [int((random.random() % (2000 / cps)) * 100) for _ in range(i)]


def get_delay_gpt(_, i):
    return [10 + random.randint(1, 170 - 10 + 1) for _ in range(i)]

def get_delay_weyn(cps, i):
    return [1000 / random.randint(cps - 3, cps + 3) for _ in range(i)]


methods = [
    get_delay_weyn,
]


def populate_unlegit_clicks(data : list, cps : int, i : int):
    for method in methods:
        data.extend(method(cps, i))



@app.route("/clicks", methods=["POST"])
def clicks():

    try:

        click_data = request.json["data"]
        print(click_data)
        sample_size = len(click_data)
        cps = 11
        data[0] = click_data
        populate_unlegit_clicks(data[0], cps, 10_000)
        data[1] = [0 for _ in range(sample_size)]
        data[1].extend([1 for _ in range(10_000)]) # set 1 for classifier 1 = generated by an algorithm

        train()

        return Response(200)
    except:
        return Response(500)


def train():
    # Split data into features and labels
    X = np.array(data[0]).reshape(-1, 1)
    y = np.array(data[1])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    classifier = GaussianNB()
    classifier.fit(X_train, y_train)

    predictions = classifier.predict(X_test)

    accuracy = accuracy_score(y_test, predictions)
    print("Accuracy:", accuracy)
    if predictions[0] == 1:
        print("The data is predicted to be in class 1")
    else:
        print("The data is predicted to be in class 0")

    
if __name__ == '__main__':
    app.run(debug=True)



